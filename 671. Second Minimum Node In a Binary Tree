/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    int min;
    int secMin=Integer.MAX_VALUE;
    int flag=0;
        
    public void minValueUtil(TreeNode root) {
        if(root==null)
            return ;
        
        if(root.val<min){
            secMin=min;
             min=root.val;
        }
        else if(root.val>min && root.val<=secMin){
            secMin=root.val;
            flag=1;
        }
        minValueUtil(root.left);
        minValueUtil(root.right);
    }   
    public int findSecondMinimumValue(TreeNode root) {
        if(root!=null){
            
            min=root.val;
            minValueUtil(root);
            if(flag==1)
            return secMin;
            
            if(secMin!=Integer.MAX_VALUE)
            return secMin;
        }
        return -1;
        
        
        
    }
}
